-
def cuenta_regresiva(valor):
    print(valor)
    if(valor > 0): # Seguir - Verde
        cuenta_regresiva(valor - 1)
    else:
        if(valor <= 0): # Parar - Rojo
            return 0
-
def regresiva(valor):
    print(valor)
    if(valor > 0): #CondiciÃ³n de Parada
        regresiva(valor - 1)
    elif (valor <= 0):
        return 0
-    
def regresiva2(valor):
    print(valor, end=",")
    if(valor <= 0): #CondiciÃ³n de Parada
        return 0
    else:
        regresiva2(valor - 1)
-
def suma_digitos(num):
    if(num == 0):
        return 0
    else:
        return num%10 + suma_digitos(num//10)
-
def largo(num):
    if isinstance(num, int) and (num > 0):
        return largo_aux(abs(num))
    else:
        return 0

def largo_aux(num):
    if(num == 0):
        return 0
    else:
        return 1 + largo_aux(num//10)
-
def aparece(num, digito):
    if isinstance(num, int) and (num > 0):
        return aparece_aux(num, digito)
    else:
        return "Error"

def aparece_aux(num, digito):
    if (num == 0):
        return 0
    else:
        if (num%10) == digito:
            return 1 + aparece_aux(num // 10, digito)
        else:
            return aparece_aux(num // 10, digito)
-
def numero(num):
    if isinstance(num, int):
        return numero_par(num), numero_impar(num)
    else:
        return "Error"

def numero_par(num):
    if (num == 0):
        return 0
    else:
        if ((num%10)%2) == 0:
            return 1 + numero_par(num // 10)
        else:
            return numero_par(num // 10)

def numero_impar(num):
    if (num == 0):
        return 0
    else:
        if ((num%10)%2) == 1:
            return 1 + numero_impar(num // 10)
        else:
            return numero_impar(num // 10)
-
def limite(num):
    if isinstance(num, int):
        return limite_aux(num)
    else:
        return "Error"

def limite_aux(num):
    if num == 0:
        return True
    else:
        if ((num%10) >= 0) and ((num%10) <= 4):
            return limite_aux(num // 10)
        else:
            return False
-
def factorial(num):
    if isinstance(num, int):
        return factorial_aux(num)
    else:
        return "Error"

def factorial_aux(num):
    if num == 0:
        return 0
    else:
        return num * factorial_aux(num - 1)
-
def fihonacci(num):
    if isinstance(num, int) and (num > 0):
        return fibonacci_aux(num)
    else:
        return 0

def fibonacci_aux(num):
    if (num <= 2):
        return num
    else:
        return fibonacci_aux(num - 1) + fibonacci_aux(num - 2)
-
def sumatoria(num):
    if isinstance(num, int) and (num > 0):
        return sumatoria_aux(num)
    else:
        return 0

def sumatoria_aux(num):
    print(num, end="+")
    if (num == 0):
        return 0
    else:
        return num + sumatoria_aux(num - 1)
-
def suma(lista):
    #if type(lista) == list
    if isinstance(lista, list):
        return  suma_aux(lista)
    else:
        return "Error: el valor ingresado no es una lista."

def suma_aux(lista):
    if lista == []:
        return 0
    else:
        return lista[0] + suma_aux(lista[1:])
-
def sumapar(lista):
    if isinstance(lista,list):
        return sumapar_aux(lista), sumaimp_aux(lista)
    else:
        return "Error: el valor ingresado no es una lista."

def sumapar_aux(lista):
    if lista == []:
        return 0
    else:
        if lista[0]%2 == 0:
            return lista[0] + sumapar_aux(lista[1:])
        else:
            return sumapar_aux(lista[1:])

def sumaimp_aux(lista):
    if lista == []:
        return 0
    else:
        if lista[0]%2 == 1:
            return lista[0] + sumaimp_aux(lista[1:])
        else:
            return sumaimp_aux(lista[1:])
-
def cero(lista):
    if isinstance(lista, list):
        return cero_aux(lista)
    else:
        return "Error: el valor ingresado no es una lista."

def cero_aux(lista):
    if lista == []:
        return False
    else:
        if lista[0] == 0:
            return True
        else:
            return cero_aux(lista[1:])
-
def positivo(lista):
    if isinstance(lista, list):
        return positivo_aux(lista)
    else:
        return "Error: el valor ingresado no es una lista."

def positivo_aux(lista):
    if lista == []:
        return True
    else:
        if lista[0] < 0:
            return False
        else:
            return positivo_aux(lista[1:])
-
def minimo(lista):
    if isinstance(lista, list):
        return  minimo_aux(lista), maximo_aux(lista)
    else:
        return "Error: el valor ingresado no es una lista."

def minimo_aux(lista):
    if len(lista) == 1:
        return lista[0]
    else:
        if lista[0]<lista[1]:
            return minimo_aux([lista[0]]+lista[2:])
        else:
            return minimo_aux(lista[1:])

def maximo_aux(lista):
    if len(lista) == 1:
        return lista[0]
    else:
        if lista[0]>lista[1]:
            return maximo_aux([lista[0]]+lista[2:])
        else:
            return maximo_aux(lista[1:])
-
def cero(lista):
    if isinstance(lista, list):
        igual0 = lambda digito : digito == 0
        return cero_aux(lista, igual0)
    else:
        return "Error"

def cero_aux(lista, condicion):
    if lista == []:
        return False
    else:
        if condicion(lista[0]):
            return True
        else:
            return cero_aux(lista[1:],condicion)
-
def positivo(lista):
    if isinstance(lista, list):
        mayor0 = lambda digito : digito < 0
        return positivo_aux(lista, mayor0)
    else:
        return "Error"

def positivo_aux(lista, condicion):
    if lista == []:
        return True
    else:
        if condicion(lista[0]):
            return False
        else:
            return positivo_aux(lista[1:], condicion)
-
def paresimpares(num):
    if isinstance(num, int):
        pares = lambda digito : digito % 2 == 0
        impares = lambda digito : digito % 2 == 1
        return paresimpares_aux(num, pares), paresimpares_aux(num, impares)
    else:
        return "Error"

def paresimpares_aux(num, condicion):
    if num == 0:
        return 0
    else:
        if condicion(num % 10):
            return 1 + paresimpares_aux(num // 10, condicion)
        else:
            return paresimpares_aux(num // 10, condicion)
-
def repite(lista, num):
    if isinstance(lista, list) and isinstance(num, int):
        veces = lambda digito, numero: digito == numero
        return repite_aux(lista, num, veces)
    else:
        return "Error"

def repite_aux(lista, numero, condicion):
    if lista == []:
        return 0
    else:
        if condicion(lista[0], numero):
            return 1 + repite_aux(lista[1:], numero, condicion)
        else:
            return repite_aux(lista[1:], numero, condicion)
-
def sumar(lista):
    if isinstance(lista, list):
        return sumar_lista(lista)
    else:
        return "Error"

def sumar_lista(lista):
    if lista == []:
        return 0
    else:
        if isinstance(lista[0], list):
            return sumar_lista(lista[0]) + sumar_lista(lista[1:])
        else:
            return lista[0] + sumar_lista(lista[1:])
-
def busqueda(num, lista):
    if isinstance(num, int) and (lista, list):
        return busqueda_aux(num, lista, 0)
    else:
        return "Error"

def busqueda_aux(num, lista, indice):
    if (indice == len(lista)):
        return False
    else:
        if (lista[indice] == num):
            return True
        else:
            return busqueda_aux(num, lista, indice + 1)
-
def busqueda2(num, lista):
    if isinstance(num, int) and (lista, list):
        return busqueda_aux2(num, lista)
    else:
        return "Error"

def busqueda_aux2(num, lista):
    if (lista == []):
        return False
    else:
        if (lista[0] == num):
            return True
        else:
            return busqueda_aux(num, lista[1:])
