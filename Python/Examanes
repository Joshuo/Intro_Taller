#1

def formarLista(num):
    if isinstance(num, int) and (num>0):
        return formarLista_aux(num, list)
    else:
        return "Error"

def formarLista_aux(num, lista):
    if (num == 0):
        return lista
    else:
        if ((num%10)%2 == 0):
            return lista[(num%10) + lista] + formarLista_aux(num // 10, lista)
        else:
            return formarLista_aux(num // 10, lista)


#2

def palindromo(num):
    if isinstance(num, int) and (num>0):
        return palindromo(num)
    else:
        return "Error"

def palindromo_aux(num):
    if (num%num == 10):
        return True
    else:
        return False

#3

def contarConsonantes(texto):
    if isinstance(texto, string):
        return novocal(texto)
    else:
        return "Error"

def novocal(texto):
    if (texto[0] == []):
        return []
    else:
        if(texto[0] == "a")
            return novocal([:1])
        else:
            if(texto[0] == "e")
                return novocal([:1])
            else:
                if(texto[0] == "i")
                    return novocal([:1])
                else:
                    if(texto[0] == "o")
                        return novocal([:1])
                    else:
                        if(texto[0] == "u")
                            return novocal([:1])
                        else:
                            return 1 + novocal([:1])

#4

def intercambiar(lista):
    if isinstance(lista, list):
        return inter_aux(lista)
    else:
        return "Error"

def inter_aux(lista):
    if (lista == []):
        return 0
    else:
        return(lista[0:]) + inter_aux(lista[2:])

#1
def invertir(lista):
    if isinstance(lista,list) and lista !=[]:
        return invertir_aux(lista, 0)
    else:
        return "Error"

def invertir_aux(lista, indice):
    if indice == len(lista):
        return lista
    else:
        return invertir_aux(lista[indice] + lista, indice + 1)

#2.1

def consecutivos(lista):
    if isinstance(lista,list) and lista !=[]:
        return consecutivos_aux(lista, 0, 0, 1, len(lista))
    else:
        return "Error"

def consecutivos_aux(lista, fila, columna, contador, n):
    if contador == n**2:
        return True
    else:
        if (lista[fila][columna] == contador):
            return consecutivos_aux(lista, 0, 0, contador + 1, n)
        else:
            if (lista[fila][columna] == lista[fila][n-1]):
                return consecutivos_aux(lista, fila + 1, 0, contador, n)
            else:
                if (lista[fila][columna] == lista[n-1][n-1]):
                    return False
                else:
                    return consecutivos_aux(lista, fila, columna + 1, contador, n)




#2.2

def es_magico(lista):
    if isinstance(lista,list) and lista !=[]:
        return magicf(lista, 0, 0, len(lista), 0)
    else:
        return "Error"

def magicf(lista, fila, columna, n, r1):
    if r1 ==
        return magicc(lista, 0, 0, len(lista), 0)
    else:
        if lista[fila][columna] == lista[fila][n-1]):
            return magicf(lista, fila + 1, 0, n, r1)
        else:
            if (lista[fila][columna] == lista[n-1][n-1]):
                return False
            else:
                return magicf(lista, fila, columna, n, r1)

#3

def rotar(lista):
    if isinstance(lista,list) and lista !=[]:
        return girar(
    else:
        return "Error"
